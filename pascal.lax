
function { print {r} rows of Pascal's triangle } wlabl { Pascal }

start program {

	output "\n --- PASCAL'S TRIANGLE GENERATOR ---\n\n"
	output "This is a simple program that prints out the first rows of Pascal's triangle up to a certain number.\n\n"
	
	while true {
		
		output "Enter a number: "
		r = input as integer
		
		print r rows of Pascal's triangle
		
		output "Keep going? "
		option = input
		
		if option == "Y" or option == "y" continue
		if option == "N" or option == "n" break
		
		output "Unrecognized command.\n"
		break
		
	}
	
}

function { num digits in {n} } { // Calculates the number of digits in the integer n
	
	if n == 0, return 1
	
	len = 0
	if n < 0 { n = 0 - n, len = 1 }
	
	while n > 0 { len = len + 1, n = n / 10 }
	
	return len
	
}

function { {s} blank spaces } wprec{10, 1} {
	
	space = ""
	while s > 0, { space = space + " ", s = s - 1 }
	
	return space 	
	
}

Pascal { 

	num printed rows = r

	if r < 2, r = 2

	rows = integer array array of length r 
	rows [0] = { 1 }
	rows [1] = { 1 1 }

	row = 2
	max digit length = 0

	while row < r {

		current row = integer array of length row + 1
		last row = rows [row - 1]

		current row [0] = 1
		current row [row] = 1

		col = 1
		while col < row {

			cur entry = last row [col] + last row [col - 1]

			entry digits = num digits in cur entry
			if entry digits > max digit length, max digit length = entry digits

			current row [col] = cur entry
			col = col + 1

		}

		rows[row] = current row
		row = row + 1

	}

	row = 0

	while row < num printed rows {

		current row = rows[row]
		col = 0

		while col < row + 1 {
			
			cur entry = current row [col]
			s = 1 + max digit length - num digits in cur entry
			
			output cur entry as string + s blank spaces
			
			col = col + 1
		
		}
		
		output "\n"
		row = row + 1
		
	}

}
